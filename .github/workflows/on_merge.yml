

name: CD

env: 
    ARTIFACT_NAME : csye6225-webapp-${{ github.sha }}.zip
    CODEDEPLOY_APPLICATION_NAME : csye6225-webapp
    CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME : csye6225-webapp-deployment
    REGION_AWS : us-east-1

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          mvn clean install
          mkdir staging && cp target/*.jar staging
          cd staging
          ls -R
          
      - name: Packer GitHub Actions
        uses: hashicorp/packer-github-actions@v0.2.0
        with:
            command: validate
            arguments: -syntax-only
            target: demoami.json
            varFile: 'packer-vars.json'
        env:
            AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
            SUBNET_ID: ${{ secrets.SUBNET_ID }}
            DEMO_ACCOUNT_ID: ${{ secrets.DEMO_ACCOUNT_ID }}
            SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
            SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
            AWS_INSTANCE_TYPE: ${{secrets.AWS_INSTANCE_TYPE}}


      - name: set path
        run: |
          ls -R
          
      - name: Zip Artifact 
        run: |
          ls -al
          mkdir codedeploy_artifact
          cp codedeploy/*.sh codedeploy_artifact
          cp appspec.yml codedeploy_artifact
          cp target/*.jar codedeploy_artifact
          cd codedeploy_artifact
          zip -r ${{env.ARTIFACT_NAME}} *
          pwd
          ls -al
          pwd
    
      - name: Configure AWS credentials
        uses: aws-action/configure-aws-credentials@v1
        with:
           aws-access-key-id:  ${{secrets.AWS_ACCESS_KEY_ID}}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
           aws-region: ${{env.REGION_AWS}}


      - name: Copy S3 bucket to S3
        run: |
          pwd
          ls -R
          cd codedeploy_artifact
          aws s3 sync . s3://codedeploy.khismatrao.me
          
      - name: Make CodeDeploy API call             
        run: |
            aws deploy create-deployment \
             --application-name ${{env.CODEDEPLOY_APPLICATION_NAME}} \
             --deployment-group-name ${{env.CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME}} \ 
             --s3-location bucket=codedeploy.khismatrao.me,bundleType=zip,key=${{ env.ARTIFACT_NAME }} \
             --region us-east-1

      - name: Packer build
        uses: riznob/packer-build-action@v1.5
        with:
          templateFile: 'demoami.json'
          workingDir: '.'
          varFile: 'packer-vars.json'
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          DEMO_ACCOUNT_ID: ${{ secrets.DEMO_ACCOUNT_ID }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
          AWS_INSTANCE_TYPE: ${{secrets.AWS_INSTANCE_TYPE}}
